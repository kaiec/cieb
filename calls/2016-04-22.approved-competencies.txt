2016-04-22 - approved competencies

Web technology

  Knows the origins of the World Wide Web (1989) as a non-linear
  interactive system, or hypermedia, built on the Internet.

  Understands that Linked Data (2006) extended the notion of a web of 
  documents (the Web) to a notion of a web of finer-grained data (the
  Linked Data cloud).

  Knows HyperText Markup Language, or HTML (1991+), as a language for
  "marking up" the content and multimedia components of Web pages.

  Knows HTML5 (2014) as a version of HTML extended with support for 
  complex web and mobile applications.

  Knows Hypertext Transfer Protocol, or HTTP (1991+), as the basic
  technology for resolving hyperlinks and transferring data on the World
  Wide Web.

  Knows Representational State Transfer, or REST (2000) as a software
  architectural style whereby browsers can exchange data with web
  servers, typically on the basis of well-known HTTP actions.

  Knows that Uniform Resource Identifiers, or URIs (1994), include
  Uniform Resource Locators (URLs, which locate web pages) as well as
  location-independent identifiers for physical, conceptual, or web
  resources.

RDF Data Model

  Understands a named graph as one of the collection of graphs comprising
  an RDF dataset, with a graph name unique in the context of that dataset

  Understands how an RDF class (named set of things) fundamentally differs
  from an object-oriented programming class, which defines a type of object
  bundling "state" (attributes with data values) and "behavior" (functions that
  operate on state).

  Understands how a namespace, informally used in the RDF context for a
  namespace URI or RDF vocabulary, fundamentally differs from the namespace 
  of data attributes and functions (methods) defined for an object-oriented
  class.

Processing RDF data using programming languages

  Understands how components of the RDF data model (datasets, graphs,
  statements, and various types of node) are expressed in the RDF library of a
  given programming language by constructs such as object-oriented classes.
    
    Uses an RDF programming library to serialize RDF data in available
    syntaxes.

    Uses RDF-specific programming methods to iterate over components of
    RDF data.

    Uses RDF-library-specific convenience representations for common RDF
    vocabularies such as RDF, Dublin Core, and SKOS.

    Programatically associates namespaces to prefixes for use in serializing
    RDF or when parsing SPARQL queries.

    Uses RDF programming libraries to extract RDF data from CSV files, 
    databases, or web pages.

    Uses RDF programming libraries to persistently stores triples in memory, on
    disk, or to interact with triple stores.

    Programatically infers triples using custom functions or methods.

  Understands how the pattern matching of SPARQL queries can be
  expressed using functionally equivalent constructs in RDF programming
  libraries.

    Uses RDF-specific programming methods to query RDF data and save the 
    results for further processing.

    Uses utilities and convenience functions the provide shortcuts for
    frequently used patterns, such as matching the multiple label properties
    used in real data.

    Uses RDF libraries to process various types of SPARQL query result.

Designing RDF-based vocabularies

  Knows Web Ontology Language, or OWL (2004), as a RDF vocabulary of properties
  and classes that extend support for expressive data modeling and automated
  inferencing (reasoning)

  Knows that the word "ontology" is ambiguous, referring to any RDF vocabulary,
  but more typically a set of OWL classes and properties designed to support
  inferencing in a specific domain.

  Knows Simple Knowledge Organization System, or SKOS (2009), an RDF vocabulary
  for expressing concepts that are labeled in natural languages, organized into
  informal hierarchies, and aggregated into concept schemes.

  Knows SKOS eXtension for Labels, or SKOS-XL (2009), a small set of additional
  properties for describing and linking lexical labels as instances of the class
  Label.

  Understands that in a formal sense, a SKOS concept is not an RDF class but an
  instance and, as such, is not formally associated with a set of instances
  ("class extension").

  Understands that SKOS can express a flexibly associative structure of concepts
  without enabling the more rigid and automatic inferences typically specified in
  a class-based OWL ontology.

  Understands that in contrast to OWL sub-class chains, hierarchies of SKOS
  concepts are designed not to form transitive chains automatically because
  this is not how humans think or organize information.

Reasoning over RDF data

  Knows that Web Ontology Language (OWL) is available in multiple "flavors"
  that are variously optimized for expressivity, performant reasoning, or for
  applications involving databases or business rules.

  Understands that OWL Full supports all available constructs and is most
  appropriately used when reasoning performance is not a concern.

Mapping RDF vocabularies

  Understands that the properties of hierarchical subsumption within an RDF
  vocabulary -- rdfs:subPropertyOf and rdfs:subClassOf -- can also be used to
  express mappings between vocabularies.

  Understands that owl:equivalentProperty and owl:equivalentClass may be used
  when equivalencies between properties or between classes are exact.

Managing identifiers

  Understands that to be "persistent", a URI must have a stable,
  well-documented meaning and be plausibly intended to identify a given
  resource in perpetuity

  Understands trade-offs between "opaque" URIs and URIs using version numbers,
  server names, dates, application-specific file extensions, query strings or
  other obsoletable context

  Recognizes the desirability of a published namespace policy describing
  an institution's commitment to the persistence and semantic stability of 
  important URIs

Publishing RDF vocabularies

  Understands that to be "dereferencable", a URI should be usable to 
  retrieve a representation of the resource it identifies

    Ensures that when dereferenced by a Web browser, a URI returns a 
    representation of the resource in human-readable HTML

    Ensures that when dereferenced by an RDF application, a URI returns
    representation of the resource in the requested RDF serialization syntax

Versioning RDF vocabularies

  Knows technical options for the form, content, and granularity of versions

  Understands the trade-offs between publishing RDF vocabularies in periodic,
  numbered releases versus more continual or incremental approaches

Creating RDF data

  Knows methods for generating RDF data from tabular data in formats 
  such as Comma-Separated Values (CSV)

  Knows methods such as Direct Mapping of Relational Data to RDF (2012) for
  transforming data from the relational model (keys, values, rows, columns,
  tables) into RDF graphs.

